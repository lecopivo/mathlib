/-
Copyright (c) 2020 Bhavik Mehta. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Bhavik Mehta
-/

import category_theory.sites.grothendieck

/-!
# Grothendieck pretopologies

Definition and lemmas about Grothendieck pretopologies.
A Grothendieck pretopology for a category `C` is a set of families of morphisms with fixed codomain,
satisfying certain closure conditions.

We show that a pretopology generates a genuine Grothendieck topology, and every topology has
a maximal pretopology which generates it.

## Todo

Define sheaves on a pretopology, and show they are the same as the sheaves for the topology
generated by the pretopology.

## Tags

coverage, pretopology, site

## References

* [https://ncatlab.org/nlab/show/Grothendieck+pretopology][nlab]
* [S. MacLane, I. Moerdijk, *Sheaves in Geometry and Logic*][MM92]
* [https://stacks.math.columbia.edu/tag/00VG][Stacks]
-/

universes v u
noncomputable theory

namespace category_theory

open category_theory category limits presieve

variables {C : Type u} [category.{v} C] [has_pullbacks C]

/--
Pullback a set of arrows with given codomain along a fixed map, by taking the pullback in the
category.
This is not the same as the arrow set of `sieve.pullback`, but there is a relation between them
in `pullback_arrows_comm`.
-/
def pullback_arrows {X Y : C} (f : Y ‚ü∂ X) (S : presieve X) :
  presieve Y :=
Œª Z g, ‚àÉ Z' (h : Z' ‚ü∂ X), S h ‚àß ‚àÉ (H : Z = pullback h f),
  eq_to_hom H ‚â´ pullback.snd = g

lemma pullback_arrows_comm {X Y : C} (f : Y ‚ü∂ X)
  (R : presieve X) :
  sieve.generate (pullback_arrows f R) = (sieve.generate R).pullback f :=
begin
  ext Z g,
  split,
  { rintro ‚ü®W, k, l, ‚ü®T, g, hg, rfl, rfl‚ü©, rfl‚ü©,
    refine ‚ü®_, k ‚â´ pullback.fst, g, hg, _‚ü©,
    rw [assoc, pullback.condition, eq_to_hom_refl, id_comp, assoc] },
  { rintro ‚ü®W, k, h, hh, comm‚ü©,
    exact ‚ü®_, pullback.lift _ _ comm, _, ‚ü®_, h, hh, rfl, rfl‚ü©, by simp‚ü© },
end

lemma pullback_singleton {X Y Z : C} (f : Y ‚ü∂ X) (g : Z ‚ü∂ X) :
 ‚àÉ (W : C) (k : W ‚ü∂ Y), pullback_arrows f (singleton g) = singleton k :=
begin
  refine ‚ü®pullback (eq_to_hom (eq.refl _) ‚â´ g) f, pullback.snd, _‚ü©,
  ext W k,
  split,
  { rintro ‚ü®W, k, ‚ü®rfl, rfl‚ü©, rfl, rfl‚ü©,
    rw [eq_to_hom_refl (pullback (eq_to_hom (eq.refl W) ‚â´ g) f) (eq.refl _), id_comp],
    apply singleton_arrow_self },
  { rintro ‚ü®rfl, rfl‚ü©,
    exact ‚ü®_, _, by simp, _, rfl‚ü© }
end

variables (C)

/--
A (Grothendieck) pretopology on `C` consists of a collection of families of morphisms with a fixed
target `X` for every object `X` in `C`, called "coverings" of `X`, which satisfies the following
three axioms:
1. Every family consisting of a single isomorphism is a covering family.
2. The collection of covering families is stable under pullback.
3. Given a covering family, and a covering family on each domain of the former, the composition
   is a covering family.

In some sense, a pretopology can be seen as Grothendieck topology with weaker saturation conditions,
in that each covering is not necessarily downward closed.

See: https://ncatlab.org/nlab/show/Grothendieck+pretopology, or
https://stacks.math.columbia.edu/tag/00VH, or [MM92] Chapter III, Section 2, Definition 2.
Note that Stacks calls a category together with a pretopology a site, and [MM92] calls this
a basis for a topology.
-/
@[ext]
structure pretopology :=
(coverings : Œ† (X : C), set (presieve X))
(has_isos : ‚àÄ ‚¶ÉX Y‚¶Ñ (f : Y ‚ü∂ X) [is_iso f], presieve.singleton f ‚àà coverings X)
(pullbacks : ‚àÄ ‚¶ÉX Y‚¶Ñ (f : Y ‚ü∂ X) S, S ‚àà coverings X ‚Üí pullback_arrows f S ‚àà coverings Y)
(transitive : ‚àÄ ‚¶ÉX : C‚¶Ñ (S : presieve X)
               (Ti : Œ† ‚¶ÉY‚¶Ñ (f : Y ‚ü∂ X), S f ‚Üí presieve Y), S ‚àà coverings X ‚Üí
               (‚àÄ ‚¶ÉY‚¶Ñ f (H : S f), Ti f H ‚àà coverings Y) ‚Üí S.bind Ti ‚àà coverings X)

namespace pretopology

instance : has_coe_to_fun (pretopology C) :=
‚ü®_, Œª J, J.coverings‚ü©

instance : partial_order (pretopology C) :=
{ le := Œª K‚ÇÅ K‚ÇÇ, (K‚ÇÅ : Œ† (X : C), set _) ‚â§ K‚ÇÇ,
  le_refl := Œª K, le_refl _,
  le_trans := Œª K‚ÇÅ K‚ÇÇ K‚ÇÉ h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ, le_trans h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ,
  le_antisymm := Œª K‚ÇÅ K‚ÇÇ h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÅ, pretopology.ext _ _ (le_antisymm h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÅ) }

instance : order_top (pretopology C) :=
{ top :=
  { coverings := Œª _, set.univ,
    has_isos := Œª _ _ _ _, set.mem_univ _,
    pullbacks := Œª _ _ _ _ _, set.mem_univ _,
    transitive := Œª _ _ _ _ _, set.mem_univ _ },
  le_top := Œª K X S hS, set.mem_univ _,
  ..pretopology.partial_order C }

instance : inhabited (pretopology C) := ‚ü®‚ä§‚ü©

/--
A pretopology `K` can be completed to a Grothendieck topology `J` by declaring a sieve to be
`J`-covering if it contains a family in `K`.

See https://stacks.math.columbia.edu/tag/00ZC, or [MM92] Chapter III, Section 2, Equation (2).
-/
def to_grothendieck (K : pretopology C) : grothendieck_topology C :=
{ sieves := Œª X S, ‚àÉ R ‚àà K X, R ‚â§ (S : presieve _),
  top_mem' := Œª X, ‚ü®presieve.singleton (ùüô _), K.has_isos _, Œª _ _ _, ‚ü®‚ü©‚ü©,
  pullback_stable' := Œª X Y S g,
  begin
    rintro ‚ü®R, hR, RS‚ü©,
    refine ‚ü®_, K.pullbacks g _ hR, _‚ü©,
    rw [‚Üê sieve.sets_iff_generate, pullback_arrows_comm],
    apply sieve.pullback_monotone,
    rwa sieve.gi_generate.gc,
  end,
  transitive' :=
  begin
    rintro X S ‚ü®R', hR', RS‚ü© R t,
    choose t‚ÇÅ t‚ÇÇ t‚ÇÉ using t,
    refine ‚ü®_, K.transitive _ _ hR' (Œª _ f hf, t‚ÇÇ (RS _ hf)), _‚ü©,
    rintro Y _ ‚ü®Z, g, f, hg, hf, rfl‚ü©,
    apply t‚ÇÉ (RS _ hg) _ hf,
  end }

lemma mem_to_grothendieck (K : pretopology C) (X S) :
  S ‚àà to_grothendieck C K X ‚Üî ‚àÉ R ‚àà K X, R ‚â§ (S : presieve X) :=
iff.rfl

/--
The largest pretopology generating the given Grothendieck topology.

See [MM92] Chapter III, Section 2, Equations (3,4).
-/
def of_grothendieck (J : grothendieck_topology C) : pretopology C :=
{ coverings := Œª X R, sieve.generate R ‚àà J X,
  has_isos := Œª X Y f i,
  begin
    apply J.covering_of_eq_top,
    rw [‚Üê sieve.id_mem_iff_eq_top],
    exactI ‚ü®_, inv f, f, by simp‚ü©,
  end,
  pullbacks := Œª X Y f R hR,
  begin
    rw [set.mem_def, pullback_arrows_comm],
    apply J.pullback_stable f hR,
  end,
  transitive := Œª X S Ti hS hTi,
  begin
    apply J.transitive hS,
    intros Y f,
    rintros ‚ü®Z, g, f, hf, rfl‚ü©,
    rw sieve.pullback_comp,
    apply J.pullback_stable g,
    apply J.superset_covering _ (hTi _ hf),
    rintro Y g ‚ü®W, h, g, hg, rfl‚ü©,
    exact ‚ü®_, h, _, ‚ü®_, _, _, hf, hg, rfl‚ü©, by simp‚ü©,
  end }

/-- We have a galois insertion from pretopologies to Grothendieck topologies. -/
def gi : galois_insertion (to_grothendieck C) (of_grothendieck C) :=
{ gc :=
  Œª K J,
  begin
    split,
    { intros h X R hR,
      apply h,
      refine ‚ü®_, hR, _‚ü©,
      apply sieve.gi_generate.gc.le_u_l },
    { rintro h X S ‚ü®R, hR, RS‚ü©,
      apply J.superset_covering _ (h _ hR),
      rwa sieve.gi_generate.gc }
  end,
  le_l_u := Œª J X S hS, ‚ü®S, J.superset_covering (sieve.gi_generate.gc.le_u_l _) hS, le_refl _‚ü©,
  choice := Œª x hx, to_grothendieck C x,
  choice_eq := Œª _ _, rfl }

/--
The trivial pretopology, in which the coverings are exactly singleton isomorphisms. This topology is
also known as the indiscrete, coarse, or chaotic topology.

See https://stacks.math.columbia.edu/tag/07GE
-/
def trivial : pretopology C :=
{ coverings := Œª X S, ‚àÉ Y (f : Y ‚ü∂ X) (h : is_iso f), S = presieve.singleton f,
  has_isos := Œª X Y f i, ‚ü®_, _, i, rfl‚ü©,
  pullbacks := Œª X Y f S,
  begin
    rintro ‚ü®Z, g, i, rfl‚ü©,
    resetI,
    refine ‚ü®pullback (eq_to_hom (eq.refl _) ‚â´ g) f, pullback.snd, _, _‚ü©,
    { refine ‚ü®pullback.lift (f ‚â´ inv g) (ùüô _) (by simp), _, _‚ü©,
      { apply pullback.hom_ext,
        { rw [assoc, pullback.lift_fst],
          rw ‚Üê pullback.condition_assoc,
          simp },
        { simp } },
      { simp } },
    clear i,
    ext W k,
    split,
    { rintro ‚ü®W, k, ‚ü®rfl, rfl‚ü©, rfl, rfl‚ü©,
      rw [eq_to_hom_refl (pullback (eq_to_hom (eq.refl W) ‚â´ g) f) (eq.refl _), id_comp],
      apply singleton_arrow_self },
    { rintro ‚ü®rfl, rfl‚ü©,
      exact ‚ü®_, _, by simp, _, rfl‚ü© },
  end,
  transitive :=
  begin
    rintro X S Ti ‚ü®Z, g, i, rfl‚ü© hS,
    rcases hS g (singleton_arrow_self g) with ‚ü®Y, f, i, hTi‚ü©,
    refine ‚ü®_, f ‚â´ g, _, _‚ü©,
    { resetI,
      apply_instance },
    ext W k,
    split,
    { rintro ‚ü®V, h, k, ‚ü®rfl, rfl‚ü©, hh, rfl‚ü©,
      simp only [id_comp, eq_to_hom_refl] at hh,
      rw hTi at hh,
      rcases hh with ‚ü®rfl, rfl‚ü©,
      simp only [id_comp, eq_to_hom_refl],
      apply singleton_arrow_self (f ‚â´ g) },
    { rintro ‚ü®rfl, rfl‚ü©,
      refine ‚ü®_, f, g, singleton_arrow_self _, _, by simp‚ü©,
      rw hTi,
      apply singleton_arrow_self }
  end }

instance : order_bot (pretopology C) :=
{ bot := trivial C,
  bot_le := Œª K X R,
  begin
    rintro ‚ü®Y, f, hf, rfl‚ü©,
    exactI K.has_isos f,
  end,
  ..pretopology.partial_order C }

/-- The trivial pretopology induces the trivial grothendieck topology. -/
lemma to_grothendieck_bot : to_grothendieck C ‚ä• = ‚ä• :=
(gi C).gc.l_bot

end pretopology

end category_theory
