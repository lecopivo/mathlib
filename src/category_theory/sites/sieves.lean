/-
Copyright (c) 2020 Bhavik Mehta. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Bhavik Mehta, E. W. Ayers
-/

import category_theory.over
import category_theory.limits.shapes.finite_limits
import category_theory.yoneda
import order.complete_lattice
import data.set.lattice

/-!
# Theory of sieves

- For an object `X` of a category `C`, a `sieve X` is a set of morphisms to `X`
  which is closed under left-composition.
- The complete lattice structure on sieves is given, as well as the Galois insertion
  given by downward-closing.
- A `sieve X` (functorially) induces a presheaf on `C` together with a monomorphism to
  the yoneda embedding of `X`.

## Tags

sieve, pullback
-/

universes v u
namespace category_theory

variables {C : Type u} [category.{v} C]
variables {X Y Z : C} (f : Y ‚ü∂ X)

/-- A set of arrows all with codomain `X`. -/
@[derive complete_lattice]
def presieve (X : C) := Œ† ‚¶ÉY‚¶Ñ, set (Y ‚ü∂ X)

namespace presieve

instance : inhabited (presieve X) := ‚ü®‚ä§‚ü©

/--
Given a set of arrows `S` all with codomain `X`, and a set of arrows with codomain `Y` for each
`f : Y ‚ü∂ X` in `S`, produce a set of arrows with codomain `X`:
`{ g ‚â´ f | (f : Y ‚ü∂ X) ‚àà S, (g : Z ‚ü∂ Y) ‚àà R f }`.
-/
def bind (S : presieve X) (R : Œ† ‚¶ÉY‚¶Ñ ‚¶Éf : Y ‚ü∂ X‚¶Ñ, S f ‚Üí presieve Y) :
  presieve X :=
Œª Z h, ‚àÉ (Y : C) (g : Z ‚ü∂ Y) (f : Y ‚ü∂ X) (H : S f), R H g ‚àß g ‚â´ f = h

@[simp]
lemma bind_comp {S : presieve X}
  {R : Œ† ‚¶ÉY : C‚¶Ñ ‚¶Éf : Y ‚ü∂ X‚¶Ñ, S f ‚Üí presieve Y} {g : Z ‚ü∂ Y} (h‚ÇÅ : S f) (h‚ÇÇ : R h‚ÇÅ g) :
bind S R (g ‚â´ f) :=
‚ü®_, _, _, h‚ÇÅ, h‚ÇÇ, rfl‚ü©

/-- The singleton presieve.  -/
-- Note we can't make this into `has_singleton` because of the out-param.
def singleton : presieve X :=
Œª Z g, ‚àÉ (H : Z = Y), eq_to_hom H ‚â´ f = g

@[simp] lemma singleton_eq_iff_domain (f g : Y ‚ü∂ X) : singleton f g ‚Üî f = g :=
begin
  split,
  { rintro ‚ü®_, rfl‚ü©,
    apply (category.id_comp _).symm },
  { rintro rfl,
    exact ‚ü®rfl, category.id_comp _‚ü© },
end

lemma singleton_arrow_self : singleton f f := (singleton_eq_iff_domain _ _).2 rfl

end presieve

/--
For an object `X` of a category `C`, a `sieve X` is a set of morphisms to `X` which is closed under
left-composition.
-/
structure sieve {C : Type u} [category.{v} C] (X : C) :=
(arrows : presieve X)
(downward_closed' : ‚àÄ {Y Z f} (hf : arrows f) (g : Z ‚ü∂ Y), arrows (g ‚â´ f))

namespace sieve

instance {X : C} : has_coe_to_fun (sieve X) := ‚ü®_, sieve.arrows‚ü©

variables {S R : sieve X}

@[simp, priority 100] lemma downward_closed (S : sieve X) {f : Y ‚ü∂ X} (hf : S f)
  (g : Z ‚ü∂ Y) : S (g ‚â´ f) :=
S.downward_closed' hf g

lemma arrows_ext : Œ† {R S : sieve X}, R.arrows = S.arrows ‚Üí R = S
| ‚ü®Ra, _‚ü© ‚ü®Sa, _‚ü© rfl := rfl

@[ext]
protected lemma ext {R S : sieve X}
  (h : ‚àÄ ‚¶ÉY‚¶Ñ (f : Y ‚ü∂ X), R f ‚Üî S f) :
  R = S :=
arrows_ext $ funext $ Œª x, funext $ Œª f, propext $ h f

protected lemma ext_iff {R S : sieve X} :
  R = S ‚Üî (‚àÄ ‚¶ÉY‚¶Ñ (f : Y ‚ü∂ X), R f ‚Üî S f) :=
‚ü®Œª h Y f, h ‚ñ∏ iff.rfl, sieve.ext‚ü©

open lattice

/-- The supremum of a collection of sieves: the union of them all. -/
protected def Sup (ùíÆ : set (sieve X)) : (sieve X) :=
{ arrows := Œª Y, {f | ‚àÉ S ‚àà ùíÆ, sieve.arrows S f},
  downward_closed' := Œª Y Z f, by { rintro ‚ü®S, hS, hf‚ü© g, exact ‚ü®S, hS, S.downward_closed hf _‚ü© } }

/-- The infimum of a collection of sieves: the intersection of them all. -/
protected def Inf (ùíÆ : set (sieve X)) : (sieve X) :=
{ arrows := Œª Y, {f | ‚àÄ S ‚àà ùíÆ, sieve.arrows S f},
  downward_closed' := Œª Y Z f hf g S H, S.downward_closed (hf S H) g }

/-- The union of two sieves is a sieve. -/
protected def union (S R : sieve X) : sieve X :=
{ arrows := Œª Y f, S f ‚à® R f,
  downward_closed' := by { rintros Y Z f (h | h) g; simp [h] } }

/-- The intersection of two sieves is a sieve. -/
protected def inter (S R : sieve X) : sieve X :=
{ arrows := Œª Y f, S f ‚àß R f,
  downward_closed' := by { rintros Y Z f ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© g, simp [h‚ÇÅ, h‚ÇÇ] } }

/--
Sieves on an object `X` form a complete lattice.
We generate this directly rather than using the galois insertion for nicer definitional properties.
-/
instance : complete_lattice (sieve X) :=
{ le           := Œª S R, ‚àÄ ‚¶ÉY‚¶Ñ (f : Y ‚ü∂ X), S f ‚Üí R f,
  le_refl      := Œª S f q, id,
  le_trans     := Œª S‚ÇÅ S‚ÇÇ S‚ÇÉ S‚ÇÅ‚ÇÇ S‚ÇÇ‚ÇÉ Y f h, S‚ÇÇ‚ÇÉ _ (S‚ÇÅ‚ÇÇ _ h),
  le_antisymm  := Œª S R p q, sieve.ext (Œª Y f, ‚ü®p _, q _‚ü©),
  top          := { arrows := Œª _, set.univ, downward_closed' := Œª Y Z f g h, ‚ü®‚ü© },
  bot          := { arrows := Œª _, ‚àÖ, downward_closed' := Œª _ _ _ p _, false.elim p },
  sup          := sieve.union,
  inf          := sieve.inter,
  Sup          := sieve.Sup,
  Inf          := sieve.Inf,
  le_Sup       := Œª ùíÆ S hS Y f hf, ‚ü®S, hS, hf‚ü©,
  Sup_le       := Œª ‚Ñ∞ S hS Y f, by { rintro ‚ü®R, hR, hf‚ü©, apply hS R hR _ hf },
  Inf_le       := Œª _ _ hS _ _ h, h _ hS,
  le_Inf       := Œª _ _ hS _ _ hf _ hR, hS _ hR _ hf,
  le_sup_left  := Œª _ _ _ _, or.inl,
  le_sup_right := Œª _ _ _ _, or.inr,
  sup_le       := Œª _ _ _ a b _ _ hf, hf.elim (a _) (b _),
  inf_le_left  := Œª _ _ _ _, and.left,
  inf_le_right := Œª _ _ _ _, and.right,
  le_inf       := Œª _ _ _ p q _ _ z, ‚ü®p _ z, q _ z‚ü©,
  le_top       := Œª _ _ _ _, trivial,
  bot_le       := Œª _ _ _, false.elim }

/-- The maximal sieve always exists. -/
instance sieve_inhabited : inhabited (sieve X) := ‚ü®‚ä§‚ü©

@[simp]
lemma mem_Inf {Ss : set (sieve X)} {Y} (f : Y ‚ü∂ X) :
  Inf Ss f ‚Üî ‚àÄ (S : sieve X) (H : S ‚àà Ss), S f :=
iff.rfl

@[simp]
lemma mem_Sup {Ss : set (sieve X)} {Y} (f : Y ‚ü∂ X) :
  Sup Ss f ‚Üî ‚àÉ (S : sieve X) (H : S ‚àà Ss), S f :=
iff.rfl

@[simp]
lemma mem_inter {R S : sieve X} {Y} (f : Y ‚ü∂ X) :
  (R ‚äì S) f ‚Üî R f ‚àß S f :=
iff.rfl

@[simp]
lemma mem_union {R S : sieve X} {Y} (f : Y ‚ü∂ X) :
  (R ‚äî S) f ‚Üî R f ‚à® S f :=
iff.rfl

@[simp]
lemma mem_top (f : Y ‚ü∂ X) : (‚ä§ : sieve X) f := trivial

/-- Generate the smallest sieve containing the given set of arrows. -/
def generate (R : presieve X) : sieve X :=
{ arrows := Œª Z f, ‚àÉ Y (h : Z ‚ü∂ Y) (g : Y ‚ü∂ X), R g ‚àß h ‚â´ g = f,
  downward_closed' :=
  begin
    rintro Y Z _ ‚ü®W, g, f, hf, rfl‚ü© h,
    exact ‚ü®_, h ‚â´ g, _, hf, by simp‚ü©,
  end }

lemma mem_generate (R : presieve X) (f : Z ‚ü∂ X) :
  generate R f ‚Üî ‚àÉ (Y : C) (h : Z ‚ü∂ Y) (g : Y ‚ü∂ X), R g ‚àß h ‚â´ g = f :=
iff.rfl

/-- Given a collection of arrows with fixed codomain,  -/
def bind (S : presieve X) (R : Œ† ‚¶ÉY‚¶Ñ ‚¶Éf : Y ‚ü∂ X‚¶Ñ, S f ‚Üí sieve Y) : sieve X :=
{ arrows := S.bind (Œª Y f h, R h),
  downward_closed' :=
  begin
    rintro Y Z f ‚ü®W, f, h, hh, hf, rfl‚ü© g,
    exact ‚ü®_, g ‚â´ f, _, hh, by simp [hf]‚ü©,
  end }

open order lattice

lemma sets_iff_generate (R : presieve X) (S : sieve X) :
  generate R ‚â§ S ‚Üî R ‚â§ S :=
‚ü®Œª H Y g hg, H _ ‚ü®_, ùüô _, _, hg, category.id_comp _‚ü©,
 Œª ss Y f,
  begin
    rintro ‚ü®Z, f, g, hg, rfl‚ü©,
    exact S.downward_closed (ss Z hg) f,
  end‚ü©

/-- Show that there is a galois insertion (generate, set_over). -/
def gi_generate : galois_insertion (generate : presieve X ‚Üí sieve X) arrows :=
{ gc := sets_iff_generate,
  choice := Œª ùí¢ _, generate ùí¢,
  choice_eq := Œª _ _, rfl,
  le_l_u := Œª S Y f hf, ‚ü®_, ùüô _, _, hf, category.id_comp _‚ü© }

/-- Given a morphism `h : Y ‚ü∂ X`, send a sieve S on X to a sieve on Y
    as the inverse image of S with `_ ‚â´ h`.
    That is, `sieve.pullback S h := (‚â´ h) '‚Åª¬π S`. -/
def pullback (h : Y ‚ü∂ X) (S : sieve X) : sieve Y :=
{ arrows := Œª Y sl, S (sl ‚â´ h),
  downward_closed' := Œª Z W f g h, by simp [g] }

@[simp] lemma mem_pullback (h : Y ‚ü∂ X) {f : Z ‚ü∂ Y} :
  (S.pullback h) f ‚Üî S (f ‚â´ h) := iff.rfl

@[simp]
lemma pullback_id : S.pullback (ùüô _) = S :=
by simp [sieve.ext_iff]

@[simp]
lemma pullback_top {f : Y ‚ü∂ X} : (‚ä§ : sieve X).pullback f = ‚ä§ :=
top_unique (Œª _ g, id)

lemma pullback_comp {f : Y ‚ü∂ X} {g : Z ‚ü∂ Y} (S : sieve X) :
  S.pullback (g ‚â´ f) = (S.pullback f).pullback g :=
by simp [sieve.ext_iff]

@[simp]
lemma pullback_inter {f : Y ‚ü∂ X} (S R : sieve X) :
 (S ‚äì R).pullback f = S.pullback f ‚äì R.pullback f :=
by simp [sieve.ext_iff]

/-- If the identity arrow is in a sieve, the sieve is maximal. -/
lemma id_mem_iff_eq_top : S (ùüô X) ‚Üî S = ‚ä§ :=
‚ü®Œª h, top_unique $ Œª Y f _, by simpa using downward_closed _ h f,
 Œª h, h.symm ‚ñ∏ trivial‚ü©

lemma pullback_eq_top_iff_mem (f : Y ‚ü∂ X) : S f ‚Üî S.pullback f = ‚ä§ :=
by rw [‚Üê id_mem_iff_eq_top, mem_pullback, category.id_comp]

lemma pullback_eq_top_of_mem (S : sieve X) {f : Y ‚ü∂ X} : S f ‚Üí S.pullback f = ‚ä§ :=
(pullback_eq_top_iff_mem f).1

/--
Push a sieve `R` on `Y` forward along an arrow `f : Y ‚ü∂ X`: `gf : Z ‚ü∂ X` is in the sieve if `gf`
factors through some `g : Z ‚ü∂ Y` which is in `R`.
-/
def pushforward (f : Y ‚ü∂ X) (R : sieve Y) : sieve X :=
{ arrows := Œª Z gf, ‚àÉ g, g ‚â´ f = gf ‚àß R g,
  downward_closed' := Œª Z‚ÇÅ Z‚ÇÇ g ‚ü®j, k, z‚ü© h, ‚ü®h ‚â´ j, by simp [k], by simp [z]‚ü© }

@[simp]
lemma mem_pushforward_of_comp {R : sieve Y} {Z : C} {g : Z ‚ü∂ Y} (hg : R g) (f : Y ‚ü∂ X) :
  R.pushforward f (g ‚â´ f) :=
‚ü®g, rfl, hg‚ü©

lemma pushforward_comp {f : Y ‚ü∂ X} {g : Z ‚ü∂ Y} (R : sieve Z) :
  R.pushforward (g ‚â´ f) = (R.pushforward g).pushforward f :=
sieve.ext (Œª W h, ‚ü®Œª ‚ü®f‚ÇÅ, hq, hf‚ÇÅ‚ü©, ‚ü®f‚ÇÅ ‚â´ g, by simpa, f‚ÇÅ, rfl, hf‚ÇÅ‚ü©,
                   Œª ‚ü®y, hy, z, hR, hz‚ü©, ‚ü®z, by rwa reassoc_of hR, hz‚ü©‚ü©)

lemma galois_connection (f : Y ‚ü∂ X) : galois_connection (sieve.pushforward f) (sieve.pullback f) :=
Œª S R, ‚ü®Œª hR Z g hg, hR _ ‚ü®g, rfl, hg‚ü©, Œª hS Z g ‚ü®h, hg, hh‚ü©, hg ‚ñ∏ hS h hh‚ü©

lemma pullback_monotone (f : Y ‚ü∂ X) : monotone (sieve.pullback f) :=
(galois_connection f).monotone_u

lemma pushforward_monotone (f : Y ‚ü∂ X) : monotone (sieve.pushforward f) :=
(galois_connection f).monotone_l

lemma le_pushforward_pullback (f : Y ‚ü∂ X) (R : sieve Y) :
  R ‚â§ (R.pushforward f).pullback f :=
(galois_connection f).le_u_l _

lemma pullback_pushforward_le (f : Y ‚ü∂ X) (R : sieve X) :
  (R.pullback f).pushforward f ‚â§ R :=
(galois_connection f).l_u_le _

lemma pushforward_union {f : Y ‚ü∂ X} (S R : sieve Y) :
  (S ‚äî R).pushforward f = S.pushforward f ‚äî R.pushforward f :=
(galois_connection f).l_sup

lemma pushforward_le_bind_of_mem (S : presieve X)
  (R : Œ† ‚¶ÉY : C‚¶Ñ ‚¶Éf : Y ‚ü∂ X‚¶Ñ, S f ‚Üí sieve Y) (f : Y ‚ü∂ X) (h : S f) :
  (R h).pushforward f ‚â§ bind S R :=
begin
  rintro Z _ ‚ü®g, rfl, hg‚ü©,
  exact ‚ü®_, g, f, h, hg, rfl‚ü©,
end

lemma le_pullback_bind (S : presieve X) (R : Œ† ‚¶ÉY : C‚¶Ñ ‚¶Éf : Y ‚ü∂ X‚¶Ñ, S f ‚Üí sieve Y)
  (f : Y ‚ü∂ X) (h : S f) :
  R h ‚â§ (bind S R).pullback f :=
begin
  rw ‚Üê galois_connection f,
  apply pushforward_le_bind_of_mem,
end

/-- If `f` is a monomorphism, the pushforward-pullback adjunction on sieves is coreflective. -/
def galois_coinsertion_of_mono (f : Y ‚ü∂ X) [mono f] :
  galois_coinsertion (sieve.pushforward f) (sieve.pullback f) :=
begin
  apply (galois_connection f).to_galois_coinsertion,
  rintros S Z g ‚ü®g‚ÇÅ, hf, hg‚ÇÅ‚ü©,
  rw cancel_mono f at hf,
  rwa ‚Üê hf,
end

/-- If `f` is a split epi, the pushforward-pullback adjunction on sieves is reflective. -/
def galois_insertion_of_split_epi (f : Y ‚ü∂ X) [split_epi f] :
  galois_insertion (sieve.pushforward f) (sieve.pullback f) :=
begin
  apply (galois_connection f).to_galois_insertion,
  intros S Z g hg,
  refine ‚ü®g ‚â´ section_ f, by simpa‚ü©,
end

/-- A sieve induces a presheaf. -/
@[simps]
def functor (S : sieve X) : C·µí·µñ ‚•§ Type v :=
{ obj := Œª Y, {g : Y.unop ‚ü∂ X // S.arrows g},
  map := Œª Y Z f g, ‚ü®f.unop ‚â´ g.1, downward_closed _ g.2 _‚ü© }

/--
If a sieve S is contained in a sieve T, then we have a morphism of presheaves on their induced
presheaves.
-/
@[simps]
def nat_trans_of_le {S T : sieve X} (h : S ‚â§ T) : S.functor ‚ü∂ T.functor :=
{ app := Œª Y f, ‚ü®f.1, h _ f.2‚ü© }.

/-- The natural inclusion from the functor induced by a sieve to the yoneda embedding. -/
@[simps]
def functor_inclusion (S : sieve X) : S.functor ‚ü∂ yoneda.obj X :=
{ app := Œª Y f, f.1 }.

lemma nat_trans_of_le_comm {S T : sieve X} (h : S ‚â§ T) :
  nat_trans_of_le h ‚â´ functor_inclusion _ = functor_inclusion _ :=
rfl

/-- The presheaf induced by a sieve is a subobject of the yoneda embedding. -/
instance functor_inclusion_is_mono : mono (functor_inclusion S) :=
‚ü®Œª Z f g h, by { ext Y y, apply congr_fun (nat_trans.congr_app h Y) y }‚ü©

end sieve
end category_theory
