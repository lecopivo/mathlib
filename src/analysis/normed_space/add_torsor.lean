/-
Copyright (c) 2020 Joseph Myers. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Joseph Myers, Yury Kudryashov.
-/
import linear_algebra.affine_space.midpoint
import topology.metric_space.isometry
import topology.instances.real_vector_space

/-!
# Torsors of additive normed group actions.

This file defines torsors of additive normed group actions, with a
metric space structure.  The motivating case is Euclidean affine
spaces.

-/

noncomputable theory
open_locale nnreal topological_space
open filter

/-- A `normed_add_torsor V P` is a torsor of an additive normed group
action by a `normed_group V` on points `P`. We bundle the metric space
structure and require the distance to be the same as results from the
norm (which in fact implies the distance yields a metric space, but
bundling just the distance and using an instance for the metric space
results in type class problems). -/
class normed_add_torsor (V : out_param $ Type*) (P : Type*)
  [out_param $ normed_group V] [metric_space P]
  extends add_torsor V P :=
(dist_eq_norm' : ‚àÄ (x y : P), dist x y = ‚à•(x -·µ• y : V)‚à•)

variables {Œ± V P : Type*} [normed_group V] [metric_space P] [normed_add_torsor V P]
include V

section

variable (V)

/-- The distance equals the norm of subtracting two points. In this
lemma, it is necessary to have `V` as an explicit argument; otherwise
`rw dist_eq_norm_vsub` sometimes doesn't work. -/
lemma dist_eq_norm_vsub (x y : P) :
  dist x y = ‚à•(x -·µ• y)‚à• :=
normed_add_torsor.dist_eq_norm' x y

/-- A `normed_group` is a `normed_add_torsor` over itself. -/
@[priority 100]
instance normed_group.normed_add_torsor : normed_add_torsor V V :=
{ dist_eq_norm' := dist_eq_norm }

end

@[simp] lemma dist_vadd_cancel_left (v : V) (x y : P) :
  dist (v +·µ• x) (v +·µ• y) = dist x y :=
by rw [dist_eq_norm_vsub V, dist_eq_norm_vsub V, vadd_vsub_vadd_cancel_left]

@[simp] lemma dist_vadd_cancel_right (v‚ÇÅ v‚ÇÇ : V) (x : P) :
  dist (v‚ÇÅ +·µ• x) (v‚ÇÇ +·µ• x) = dist v‚ÇÅ v‚ÇÇ :=
by rw [dist_eq_norm_vsub V, dist_eq_norm, vadd_vsub_vadd_cancel_right]

@[simp] lemma dist_vsub_cancel_left (x y z : P) : dist (x -·µ• y) (x -·µ• z) = dist y z :=
by rw [dist_eq_norm, vsub_sub_vsub_cancel_left, dist_comm, dist_eq_norm_vsub V]

@[simp] lemma dist_vsub_cancel_right (x y z : P) : dist (x -·µ• z) (y -·µ• z) = dist x y :=
by rw [dist_eq_norm, vsub_sub_vsub_cancel_right, dist_eq_norm_vsub V]

lemma dist_vadd_vadd_le (v v' : V) (p p' : P) :
  dist (v +·µ• p) (v' +·µ• p') ‚â§ dist v v' + dist p p' :=
by simpa using dist_triangle (v +·µ• p) (v' +·µ• p) (v' +·µ• p')

lemma dist_vsub_vsub_le (p‚ÇÅ p‚ÇÇ p‚ÇÉ p‚ÇÑ : P) :
  dist (p‚ÇÅ -·µ• p‚ÇÇ) (p‚ÇÉ -·µ• p‚ÇÑ) ‚â§ dist p‚ÇÅ p‚ÇÉ + dist p‚ÇÇ p‚ÇÑ :=
by { rw [dist_eq_norm, vsub_sub_vsub_comm, dist_eq_norm_vsub V, dist_eq_norm_vsub V],
 exact norm_sub_le _ _ }

lemma nndist_vadd_vadd_le (v v' : V) (p p' : P) :
  nndist (v +·µ• p) (v' +·µ• p') ‚â§ nndist v v' + nndist p p' :=
by simp only [‚Üê nnreal.coe_le_coe, nnreal.coe_add, ‚Üê dist_nndist, dist_vadd_vadd_le]

lemma nndist_vsub_vsub_le (p‚ÇÅ p‚ÇÇ p‚ÇÉ p‚ÇÑ : P) :
  nndist (p‚ÇÅ -·µ• p‚ÇÇ) (p‚ÇÉ -·µ• p‚ÇÑ) ‚â§ nndist p‚ÇÅ p‚ÇÉ + nndist p‚ÇÇ p‚ÇÑ :=
by simp only [‚Üê nnreal.coe_le_coe, nnreal.coe_add, ‚Üê dist_nndist, dist_vsub_vsub_le]

lemma edist_vadd_vadd_le (v v' : V) (p p' : P) :
  edist (v +·µ• p) (v' +·µ• p') ‚â§ edist v v' + edist p p' :=
by { simp only [edist_nndist], apply_mod_cast nndist_vadd_vadd_le }

lemma edist_vsub_vsub_le (p‚ÇÅ p‚ÇÇ p‚ÇÉ p‚ÇÑ : P) :
  edist (p‚ÇÅ -·µ• p‚ÇÇ) (p‚ÇÉ -·µ• p‚ÇÑ) ‚â§ edist p‚ÇÅ p‚ÇÉ + edist p‚ÇÇ p‚ÇÑ :=
by { simp only [edist_nndist], apply_mod_cast nndist_vsub_vsub_le }

omit V

/-- The distance defines a metric space structure on the torsor. This
is not an instance because it depends on `V` to define a `metric_space
P`. -/
def metric_space_of_normed_group_of_add_torsor (V P : Type*) [normed_group V] [add_torsor V P] :
  metric_space P :=
{ dist := Œª x y, ‚à•(x -·µ• y : V)‚à•,
  dist_self := Œª x, by simp,
  eq_of_dist_eq_zero := Œª x y h, by simpa using h,
  dist_comm := Œª x y, by simp only [‚Üêneg_vsub_eq_vsub_rev y x, norm_neg],
  dist_triangle := begin
    intros x y z,
    change ‚à•x -·µ• z‚à• ‚â§ ‚à•x -·µ• y‚à• + ‚à•y -·µ• z‚à•,
    rw ‚Üêvsub_add_vsub_cancel,
    apply norm_add_le
  end }

include V

namespace isometric

/-- The map `v ‚Ü¶ v +·µ• p` as an isometric equivalence between `V` and `P`. -/
def vadd_const (p : P) : V ‚âÉ·µ¢ P :=
‚ü®equiv.vadd_const p, isometry_emetric_iff_metric.2 $ Œª x‚ÇÅ x‚ÇÇ, dist_vadd_cancel_right x‚ÇÅ x‚ÇÇ p‚ü©

@[simp] lemma coe_vadd_const (p : P) : ‚áë(vadd_const p) = Œª v, v +·µ• p := rfl

@[simp] lemma coe_vadd_const_symm (p : P) : ‚áë(vadd_const p).symm = Œª p', p' -·µ• p := rfl

@[simp] lemma vadd_const_to_equiv (p : P) : (vadd_const p).to_equiv = equiv.vadd_const p := rfl

/-- `p' ‚Ü¶ p -·µ• p'` as an equivalence. -/
def const_vsub (p : P) : P ‚âÉ·µ¢ V :=
‚ü®equiv.const_vsub p, isometry_emetric_iff_metric.2 $ Œª p‚ÇÅ p‚ÇÇ, dist_vsub_cancel_left _ _ _‚ü©

@[simp] lemma coe_const_vsub (p : P) : ‚áë(const_vsub p) = (-·µ•) p := rfl

@[simp] lemma coe_const_vsub_symm (p : P) : ‚áë(const_vsub p).symm = Œª v, -v +·µ• p := rfl

variables (P)

/-- The map `p ‚Ü¶ v +·µ• p` as an isometric automorphism of `P`. -/
def const_vadd (v : V) : P ‚âÉ·µ¢ P :=
‚ü®equiv.const_vadd P v, isometry_emetric_iff_metric.2 $ dist_vadd_cancel_left v‚ü©

@[simp] lemma coe_const_vadd (v : V) : ‚áë(const_vadd P v) = (+·µ•) v := rfl

variable (V)

@[simp] lemma const_vadd_zero : const_vadd P (0:V) = isometric.refl P :=
isometric.to_equiv_inj $ equiv.const_vadd_zero V P

variables {P V}

/-- Point reflection in `x` as an `isometric` homeomorphism. -/
def point_reflection (x : P) : P ‚âÉ·µ¢ P :=
(const_vsub x).trans (vadd_const x)

lemma point_reflection_apply (x y : P) : point_reflection x y = x -·µ• y +·µ• x := rfl

@[simp] lemma point_reflection_to_equiv (x : P) :
  (point_reflection x).to_equiv = equiv.point_reflection x := rfl

@[simp] lemma point_reflection_self (x : P) : point_reflection x x = x :=
equiv.point_reflection_self x

lemma point_reflection_involutive (x : P) : function.involutive (point_reflection x : P ‚Üí P) :=
equiv.point_reflection_involutive x

@[simp] lemma point_reflection_symm (x : P) : (point_reflection x).symm = point_reflection x :=
to_equiv_inj $ equiv.point_reflection_symm x

@[simp] lemma dist_point_reflection_fixed (x y : P) :
  dist (point_reflection x y) x = dist y x :=
by rw [‚Üê (point_reflection x).dist_eq y x, point_reflection_self]

lemma dist_point_reflection_self' (x y : P) :
  dist (point_reflection x y) y = ‚à•bit0 (x -·µ• y)‚à• :=
by rw [point_reflection_apply, dist_eq_norm_vsub V, vadd_vsub_assoc, bit0]

lemma dist_point_reflection_self (ùïú : Type*) [normed_field ùïú] [normed_space ùïú V] (x y : P) :
  dist (point_reflection x y) y = ‚à•(2:ùïú)‚à• * dist x y :=
by rw [dist_point_reflection_self', ‚Üê two_smul' ùïú (x -·µ• y), norm_smul, ‚Üê dist_eq_norm_vsub V]

lemma point_reflection_fixed_iff (ùïú : Type*) [normed_field ùïú] [normed_space ùïú V] [invertible (2:ùïú)]
  {x y : P} :
  point_reflection x y = y ‚Üî y = x :=
affine_equiv.point_reflection_fixed_iff_of_module ùïú

variables [normed_space ‚Ñù V]

lemma dist_point_reflection_self_real (x y : P) :
  dist (point_reflection x y) y = 2 * dist x y :=
by { rw [dist_point_reflection_self ‚Ñù, real.norm_two], apply_instance }

@[simp] lemma point_reflection_midpoint_left (x y : P) :
  point_reflection (midpoint ‚Ñù x y) x = y :=
affine_equiv.point_reflection_midpoint_left x y

@[simp] lemma point_reflection_midpoint_right (x y : P) :
  point_reflection (midpoint ‚Ñù x y) y = x :=
affine_equiv.point_reflection_midpoint_right x y

end isometric

lemma lipschitz_with.vadd [emetric_space Œ±] {f : Œ± ‚Üí V} {g : Œ± ‚Üí P} {Kf Kg : ‚Ñù‚â•0}
  (hf : lipschitz_with Kf f) (hg : lipschitz_with Kg g) :
  lipschitz_with (Kf + Kg) (f +·µ• g) :=
Œª x y,
calc edist (f x +·µ• g x) (f y +·µ• g y) ‚â§ edist (f x) (f y) + edist (g x) (g y) :
  edist_vadd_vadd_le _ _ _ _
... ‚â§ Kf * edist x y + Kg * edist x y :
  add_le_add (hf x y) (hg x y)
... = (Kf + Kg) * edist x y :
  (add_mul _ _ _).symm

lemma lipschitz_with.vsub [emetric_space Œ±] {f g : Œ± ‚Üí P} {Kf Kg : ‚Ñù‚â•0}
  (hf : lipschitz_with Kf f) (hg : lipschitz_with Kg g) :
  lipschitz_with (Kf + Kg) (f -·µ• g) :=
Œª x y,
calc edist (f x -·µ• g x) (f y -·µ• g y) ‚â§ edist (f x) (f y) + edist (g x) (g y) :
  edist_vsub_vsub_le _ _ _ _
... ‚â§ Kf * edist x y + Kg * edist x y :
  add_le_add (hf x y) (hg x y)
... = (Kf + Kg) * edist x y :
  (add_mul _ _ _).symm

lemma uniform_continuous_vadd : uniform_continuous (Œª x : V √ó P, x.1 +·µ• x.2) :=
(lipschitz_with.prod_fst.vadd lipschitz_with.prod_snd).uniform_continuous

lemma uniform_continuous_vsub : uniform_continuous (Œª x : P √ó P, x.1 -·µ• x.2) :=
(lipschitz_with.prod_fst.vsub lipschitz_with.prod_snd).uniform_continuous

lemma continuous_vadd : continuous (Œª x : V √ó P, x.1 +·µ• x.2) :=
uniform_continuous_vadd.continuous

lemma continuous_vsub : continuous (Œª x : P √ó P, x.1 -·µ• x.2) :=
uniform_continuous_vsub.continuous

lemma filter.tendsto.vadd {l : filter Œ±} {f : Œ± ‚Üí V} {g : Œ± ‚Üí P} {v : V} {p : P}
  (hf : tendsto f l (ùìù v)) (hg : tendsto g l (ùìù p)) :
  tendsto (f +·µ• g) l (ùìù (v +·µ• p)) :=
(continuous_vadd.tendsto (v, p)).comp (hf.prod_mk_nhds hg)

lemma filter.tendsto.vsub {l : filter Œ±} {f g : Œ± ‚Üí P} {x y : P}
  (hf : tendsto f l (ùìù x)) (hg : tendsto g l (ùìù y)) :
  tendsto (f -·µ• g) l (ùìù (x -·µ• y)) :=
(continuous_vsub.tendsto (x, y)).comp (hf.prod_mk_nhds hg)

section

variables [topological_space Œ±]

lemma continuous.vadd {f : Œ± ‚Üí V} {g : Œ± ‚Üí P} (hf : continuous f) (hg : continuous g) :
  continuous (f +·µ• g) :=
continuous_vadd.comp (hf.prod_mk hg)

lemma continuous.vsub {f g : Œ± ‚Üí P} (hf : continuous f) (hg : continuous g) :
  continuous (f -·µ• g) :=
continuous_vsub.comp (hf.prod_mk hg)

lemma continuous_at.vadd {f : Œ± ‚Üí V} {g : Œ± ‚Üí P} {x : Œ±} (hf : continuous_at f x)
  (hg : continuous_at g x) :
  continuous_at (f +·µ• g) x :=
hf.vadd hg

lemma continuous_at.vsub {f g : Œ± ‚Üí P}  {x : Œ±} (hf : continuous_at f x) (hg : continuous_at g x) :
  continuous_at (f -·µ• g) x :=
hf.vsub hg

lemma continuous_within_at.vadd {f : Œ± ‚Üí V} {g : Œ± ‚Üí P} {x : Œ±} {s : set Œ±}
  (hf : continuous_within_at f s x) (hg : continuous_within_at g s x) :
  continuous_within_at (f +·µ• g) s x :=
hf.vadd hg

lemma continuous_within_at.vsub {f g : Œ± ‚Üí P} {x : Œ±} {s : set Œ±}
  (hf : continuous_within_at f s x) (hg : continuous_within_at g s x) :
  continuous_within_at (f -·µ• g) s x :=
hf.vsub hg

end

variables {V' : Type*} {P' : Type*} [normed_group V'] [metric_space P'] [normed_add_torsor V' P']

/-- The map `g` from `V1` to `V2` corresponding to a map `f` from `P1`
to `P2`, at a base point `p`, is an isometry if `f` is one. -/
lemma isometry.vadd_vsub {f : P ‚Üí P'} (hf : isometry f) {p : P} {g : V ‚Üí V'}
  (hg : ‚àÄ v, g v = f (v +·µ• p) -·µ• f p) : isometry g :=
begin
  convert (isometric.vadd_const (f p)).symm.isometry.comp
    (hf.comp (isometric.vadd_const p).isometry),
  exact funext hg
end

variables [normed_space ‚Ñù V] [normed_space ‚Ñù V']
include V'

/-- A continuous map between two normed affine spaces is an affine map provided that
it sends midpoints to midpoints. -/
def affine_map.of_map_midpoint (f : P ‚Üí P')
  (h : ‚àÄ x y, f (midpoint ‚Ñù x y) = midpoint ‚Ñù (f x) (f y))
  (hfc : continuous f) :
  P ‚Üí·µÉ[‚Ñù] P' :=
affine_map.mk' f
  ‚Üë((add_monoid_hom.of_map_midpoint ‚Ñù ‚Ñù
    ((affine_equiv.vadd_const ‚Ñù (f $ classical.arbitrary P)).symm ‚àò f ‚àò
      (affine_equiv.vadd_const ‚Ñù (classical.arbitrary P))) (by simp)
      (Œª x y, by simp [h])).to_real_linear_map $ by apply_rules [continuous.vadd, continuous.vsub,
        continuous_const, hfc.comp, continuous_id])
  (classical.arbitrary P)
  (Œª p, by simp)
